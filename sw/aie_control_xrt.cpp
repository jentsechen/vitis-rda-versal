/********************************************* Disclaimer *********************************************/
/* This file is generated by aiecompiler . */
/* Changes to this file may cause incorrect behavior and will be lost if aiecompiler is invoked again.*/

#include <iostream>
#include "adf/adf_api/AIEControlConfig.h"
// #include "fft_ifft_dit_1ch.hpp"
#include "/media/jtc/Data/2024.2/Vitis/rda_dev_gmio/../Vitis_Libraries/dsp/L1/include/aie/fft_ifft_dit_1ch.hpp"
#include "/media/jtc/Data/2024.2/Vitis/rda_dev_gmio/../Vitis_Libraries/dsp/L1/include/aie/dds_mixer.hpp"


/************************** Graph Configurations  *****************************/

  adf::GraphConfig GraphConfigurations[] = {
  //{id, name, graphLoadElfFunc, graphInitFunc, graphDebugHalt, coreColumns, coreRows, iterMemColumns, iterMemRows, iterMemAddrs, triggered, plKernelInstanceNames, plAxiLiteModes, plDriverStartFuncs, plDriverCheckIPDoneFuncs}
    {0, "col_fft_twd_mul_graph", nullptr, nullptr, nullptr, {26, 27}, {0, 0}, {26, 27}, {1, 0}, {0x4, 0x4}, {0, 0}, {}, {}, {}, {},  }, 
    {4, "row_fft_graph", nullptr, nullptr, nullptr, {22}, {0}, {22}, {1}, {0x4}, {0}, {}, {}, {}, {},  }, 
  };
  const int NUM_GRAPH = 2;


/************************** RTP Configurations  *****************************/

  adf::RTPConfig RTPConfigurations[] = {
  //{portId, aliasId, portName, aliasName, graphId, isInput, isAsync, isConnect, elemType, numBytes, isPL, hasLock, blocking, selectorColumn, selectorRow, selectorAddr, selectorLockId, pingColumn, pingRow, pingAddr, pongColumn, pongRow, pongAddr, pongLockId, plKernelInstanceName, plParameterIndex, plDriverWriteRTP, plDriverReadRTP}
    {13, 16, "col_fft_twd_mul_graph.dds_kernel.m_ddsKernel[0].in[1]", "col_fft_twd_mul_graph.PhaseRTP", 0, true, true, false, (adf::RTPConfig::elementType)9, 4, false, true, false, 26, 0, 0x5000, 2, 27, 1, 0x4000, 0, 27, 1, 0x6000, 1, "", -1, nullptr, nullptr},
    {14, 15, "col_fft_twd_mul_graph.dds_kernel.m_ddsKernel[0].in[2]", "col_fft_twd_mul_graph.PhaseIncRTP", 0, true, true, false, (adf::RTPConfig::elementType)9, 4, false, true, false, 26, 0, 0x5020, 3, 27, 1, 0x1000, 2, 27, 1, 0x2000, 3, "", -1, nullptr, nullptr},
  };
  const int NUM_RTP = 2;


/************************** GMIO Configurations  *****************************/

  adf::GMIOConfig GMIOConfigurations[] = {
  //{id, name, loginal_name, type, shim_column, c_rts_channel_num (0-S2MM0,1-S2MM1,2-MM2S0,3-MM2S1), streamId, burst_length, plKernelInstanceName, plParameterIndex, plId (for aiesim), pl_driver_to_set_maxi_addr}
    {0, "col_fft_twd_mul_graph.col_fft_twd_mul_out", "col_fft_twd_mul_out", (adf::gmio_config::gmio_type)1, 27, 0, 2, 4, 0, { }, "", -1, -1, nullptr, }, 
    {1, "col_fft_twd_mul_graph.col_fft_twd_mul_in", "col_fft_twd_mul_in", (adf::gmio_config::gmio_type)0, 26, 2, 3, 4, 0, { }, "", -1, -1, nullptr, }, 
  };
  const int NUM_GMIO = 2;

/************************** PLIO Configurations  *****************************/

  adf::PLIOConfig PLIOConfigurations[] = {
  //{id, name, loginal_name, shim_column, slaveOrMaster, streamId}
    {0, "row_fft_graph.row_fft_in", "row_fft_in", 22, 0, 0},
    {1, "row_fft_graph.row_fft_out", "row_fft_out", 22, 1, 0},
  };
  const int NUM_PLIO = 2;


/************************** ADF API initializer *****************************/

  class InitializeAIEControlXRT
  {
  public:
    InitializeAIEControlXRT()
    {
      std::cout<<"Initializing ADF API..."<<std::endl;
#ifdef __EXCLUDE_PL_CONTROL__
      bool exclude_pl_control = true;
#else
      bool exclude_pl_control = false;
#endif
      adf::initializeConfigurations(nullptr, 0, 0, 0,
                                    GraphConfigurations, NUM_GRAPH,
                                    RTPConfigurations, NUM_RTP,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    GMIOConfigurations, NUM_GMIO,
                                    PLIOConfigurations, NUM_PLIO,
                                    nullptr, 0, 0, nullptr,
                                    false, exclude_pl_control, false, nullptr,
                                    true, 2);

    }
  } initAIEControlXRT;



#if !defined(__CDO__) && !defined(__AIECONTROLCODE__) && ( !defined(__TXN_BIN__) || defined(__AIESIM__) )

  using namespace adf;

// Kernel Stub Definition
// template<> void xf::dsp::aie::fft::dit_1ch::fft_ifft_dit_1ch<cfloat, cfloat, cfloat, 1024, 1, 0, 0, 10, 0, 1024, 0, 0, 0, 4, 1, 0>::fftMain(adf::io_buffer<cfloat, adf::direction::in, adf::io_buffer_config<>> &__restrict,adf::io_buffer<cfloat, adf::direction::out, adf::io_buffer_config<>> &__restrict) { /* Stub */ } 
// template<> void xf::dsp::aie::mixer::dds_mixer::dds_mixer<cfloat, 1024, 1, 1, 0, 0, 1, 4, 1, 0, 1>::ddsMixC(adf::io_buffer<cfloat, adf::direction::in, adf::io_buffer_config<>> &__restrict,adf::io_buffer<cfloat, adf::direction::out, adf::io_buffer_config<>> &__restrict,const unsigned int,const unsigned int) { /* Stub */ } 
#endif
